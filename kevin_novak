When he asked me whether or not I knew the causality of my rejections? I commented it was the Jr data scientists were the biggest the threat. This was a little difficult to say because it comes off a bit arrogant. So perhaps I should also include that, I'm a bit weak on the theoretical side, which is something I'm working to mitigate by studying.

Thought further about what you mentioned on consistent feedback... If I had to think of it myself it would be not understanding the business problem well enough if I had to give myself any.

What was your motivation to join Uber? (about a year old, just raised an A round)
- He didn't know if it was or wasn't going to be successful, but the business idea made sense
- He wanted to work with a group of people that were smarter than he was. That's how he measured downside. The people and what he'd learn from them.
- This is yet another example of how it doesn't pay to chase first order needs/desires (money, cars, titles, etc.) 

Did you have any trouble convincing the cofounders about the importance of data?
He did not, mostly because they were technical and it was easy to reason with them from a data-driven perspective.
Intuition based decision-making is the hallmark of a sales org e.g. CEO is a salesperson. 
As a matter of fact, he often used to poach from such companies because they knew Data was an afterthought hence making the data people unhappy

Con of a Technical Cofounder?
They could have strong bias for a particular TechStack and this could cause a lot of problems later on. There problem was Travis was all about php which is known to be an antiquated language. RT was that it's monolithic.

If you had to rebuild Uber's data team?
A major headache early on was separating the data orgs: operations (internal facing analytics) & R&D (consumer facing)
A) They differed in titles which caused confusion about capabilities within the org, HR and comp. 
Redundancy and inefficiency of resources, DS on one side being understaffed.
B) The data infrastructure sat on two individual servers which caused a big mess.

Data needs to have it's own identity, it's own director, provided the groups large enough. If it's not it should roll-up into engineering...
Engineers offer the most day-to-day benefits to enable data scientists for success
- access to data
- meaning of the data
- tooling
- like-mindedness interms of workflow
etc.

Benefits of a unified data org 
	- distinctions between job title became clear
	- job title standardization with corresponding skills 
	- promotions
	- redundancy of meetings, tools, resources
	- lines of ownership of tasks are clear
	- centrality of infrastructure
		- data eng not good enough at customer relations where they could handle two seperate orgs
	- there will be a point where an anlayst will need to use something beyond data analysis for a particular job. Hence the centrality aids to education.
	- allocate resources more efficiently
	- better career pathing 
	- better services for clients rather than engineering being hometown client

	Without a data org, it's harder to recruit.
	- says the leadership doesn't take it seriously
	- he was always working so, no voice at that table



What habits would you encourage?
- Stay opinionated, if not even more so
- Stay assertive
- Reluctant to compromise

How did you get adoption from units across the org in areas that wouldn't normally consider a data scientist?
e.g. advocacy groups, public policy groups, people operations. 
- trial period, where they got a taste. 
- Blow past the self-doubters about data sci not needed in their group. Bait them in by saying, "your team's excited my team's excited, lets not killed motivation." 
- seekout a data scientist who's also enthusiastic about the domain at hand and a champion on the subject team that's open minded about a novel approach and join the two. That way you get two excited people working on something

How should reporting lines be?
You need to get commitment Data is a function of the company which deserves it's own entity

What skills do you look for in a DS in today's environment?
Technical skills are being abstracted away with the advent of tooling e.g. AWS ML. It's important not to depend too much on these ML solutions because they constrain the solution space by they're ability and hence the product.

Ideal DS
- Technical background, SE heavy
- Strong sense of corporate competitiveness

Initial Team Structure
======================

Assuming DS Manager already in-place. This is someone with deep technical knowledge.

1st hire
--------
10x DS 
Pay above market. This will be your measuring stick.

2nd - 5th
---------
- todo list executers
- Enthusiasm
- Strong executers
- Competent Technical Chops-wise

5 - 25
------
- Project employees
- Leadership potential


What was your last project there?
The operations tooling group where they made: Data Science as a service basically: Experimentation, Prediction, Customer-segmentation. 

The automation/standardization of a workflow (Sklearn specific to Uber).

Gaining adoption for the ML platform tools was challenging because people were very much attached to their workflow, tools, biases. The strategy was to do it through workflow automation rather than application so no one's egos were hurt. Which ultimately led to further adoption and company-wide ML IQ and standardization. The tooling group came about as a result of the large scale around 500 data people. Other than that, shared libraries go a long way.

Technical people have strong unfounded biases which make them very hard to persuade even more so than internal clients.

Example structure of a team: Dynamic Pricing
- 8 data scientist 
- 2 engineers 
- 1 pm
Create teams adequately weighted staff-wise for it's purpose i.e. a design team would have more designers than anything else.

Does management want a head of data science? 
After that's utterly clear, grow into that role then start building out the team.

"I'm happy to build out the team but I need a commitemnt, it'll be it's own distinct org"

More skills on application as opposed learning the tools and nuances of using it. Over time, it's becoming less technical skills. Urgency/corporate competitiveness.

Follow-up questions
--------------
- How'd you spot leadership qualities in potential new hires? 
- Sounds like you spent a lot of time in management early on, did you ever find yourself getting rusty on the technical side and having shortcomings in your role as a result? I'm asking because I'm curious as to how technical should the "Head of DS" be? How hands on are they expected to be or are they just in meetings and having 1 on 1s all day.


